// variables
$l: left;
$r: right;
$t: top;
$b: bottom;
$x: x;
$y: y;
$p: p;
$m: m;
$pad: padding;
$mar: margin;
$breakpoints: normal, pc, sp;

// map with keywords used to automate building of CSS class names and property names
$repeatable-slugs: $pad $l, $pad $r, $pad $t, $pad $b, $pad $x, $pad $y,$pad $p, $mar $l, $mar $r, $mar $t, $mar $b, $mar $x,
    $mar $y, $mar $m;

// braakpoint settings -----------------------------
// @mixin bp($bp_1, $bp_2: 0) {

//     $bp_main: 600;

//     @if $bp_1=='sp' {
//         @media (max-width: #{$bp_main}px) {
//             @content;
//         }
//     }

//     @else if $bp_1=='pc' {
//         @media (min-width: #{$bp_main + 1}px) {
//             @content;
//         }
//     }

//     @else {
//         @if $bp_1 !=0 and $bp_2 !=0 {
//             @media (min-width: $bp_1) and (max-width: $bp_2) {
//                 @content;
//             }
//         }

//         @else if $bp_1==0 {
//             @media (max-width: $bp_2) {
//                 @content;
//             }
//         }

//         @else if $bp_2==0 {
//             @media (min-width: $bp_1) {
//                 @content;
//             }
//         }
//     }
// }

// helper functions
@function add-unit-to-value($value, $unit) {
    // @return ($value / 16) * 1rem;
    @return $value * 1px;
}

@function increment($i, $increment, $unit) {
    @return add-unit-to-value(0 + ($i * $increment), $unit);
}

// class generator mixin
@mixin repeat-unit-classes-map($name-map, $start, $end, $unit, $increment: 1) {
    @each $breakpoint in $breakpoints {
        @if $breakpoint==normal {
            @each $slug in $name-map {
                $key: nth($slug, 1);
                $value: nth($slug, 2);

                /* #{$slug} */

                @if $value==x {
                    @for $i from $start through $end {
                        @if $key==padding {
                            .px-#{$i * $increment} {
                                padding-left: increment($i, $increment, $unit) !important;
                                padding-right: increment($i, $increment, $unit) !important;
                            }
                        }
                        @else if $key==margin {
                            .mx-#{$i * $increment} {
                                margin-left: increment($i, $increment, $unit) !important;
                                margin-right: increment($i, $increment, $unit) !important;
                            }
                        }
                    }
                } @else if $value==y {
                    @for $i from $start through $end {
                        @if $key==padding {
                            .py-#{$i * $increment} {
                                padding-top: increment($i, $increment, $unit) !important;
                                padding-bottom: increment($i, $increment, $unit) !important;
                            }
                        }
                        @else if $key==margin {
                            .my-#{$i * $increment} {
                                margin-top: increment($i, $increment, $unit) !important;
                                margin-bottom: increment($i, $increment, $unit) !important;
                            }
                        }
                    }
                } @else {
                    @for $i from $start through $end {
                        @if $key==padding {
                            @if $value==left {
                                .pl-#{$i * $increment} {
                                    padding-left: increment($i, $increment, $unit) !important;
                                }
                            } @else if $value==right {
                                .pr-#{$i * $increment} {
                                    padding-right: increment($i, $increment, $unit) !important;
                                }
                            } @else if $value==top {
                                .pt-#{$i * $increment} {
                                    padding-top: increment($i, $increment, $unit) !important;
                                }
                            } @else if $value==bottom{
                                .pb-#{$i * $increment} {
                                    padding-bottom: increment($i, $increment, $unit) !important;
                                }
                            }
                            @else {
                                .p-#{$i * $increment} {
                                    padding: increment($i, $increment, $unit) !important;
                                }
                            }
                            
                        }
                        @if $key==margin {
                            @if $value==left {
                                .ml-#{$i * $increment} {
                                    margin-left: increment($i, $increment, $unit) !important;
                                }
                            } @else if $value==right {
                                .mr-#{$i * $increment} {
                                    margin-right: increment($i, $increment, $unit) !important;
                                }
                            } @else if $value==top {
                                .mt-#{$i * $increment} {
                                    margin-top: increment($i, $increment, $unit) !important;
                                }
                            } @else if $value==bottom {
                                .mb-#{$i * $increment} {
                                    margin-bottom: increment($i, $increment, $unit) !important;
                                }
                            }
                            @else {
                                .m-#{$i * $increment} {
                                    margin: increment($i, $increment, $unit) !important;
                                }
                            }
                        }
                    }
                }
            }
        }

        // @else {
        //     @include bp('#{$breakpoint}') {
        //         @each $slug in $name-map {
        //             $key: nth($slug, 1);
        //             $value: nth($slug, 2);

        //             /* #{$slug} */

        //             @if $value==x {
        //                 @for $i from $start through $end {
        //                     .#{$key}-x-#{$breakpoint}-#{$i * $increment} {
        //                         #{$key}-left: increment($i, $increment, $unit) !important;
        //                         #{$key}-right: increment($i, $increment, $unit) !important;
        //                     }
        //                 }
        //             }

        //             @else if $value==y {
        //                 @for $i from $start through $end {
        //                     .#{$key}-y-#{$breakpoint}-#{$i * $increment} {
        //                         #{$key}-top: increment($i, $increment, $unit) !important;
        //                         #{$key}-bottom: increment($i, $increment, $unit) !important;
        //                     }
        //                 }
        //             }

        //             @else {
        //                 @for $i from $start through $end {
        //                     .#{$key}-#{$value}-#{$breakpoint}-#{$i * $increment} {
        //                         #{$key}-#{$value}: increment($i, $increment, $unit) !important;
        //                     }
        //                 }
        //             }
        //         }
        //     }
        // }
    }
}
